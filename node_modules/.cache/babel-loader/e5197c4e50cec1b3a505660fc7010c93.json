{"ast":null,"code":"var _jsxFileName = \"/Users/maishamir/Documents/Web Dev /node/SENG411-HCI-Experiment/src/components/Block.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\nimport * as seedrandom from 'seedrandom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Format = Object.freeze({\n  TEXT: 'Text',\n  BUBBLE: 'Bubble'\n});\nexport class Block extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.logOnClickResult = (d, values) => {\n      const {\n        format,\n        n,\n        startTime,\n        curentIteration,\n        advanceIteration,\n        experimentSeed,\n        userID,\n        addResults\n      } = this.props;\n      const endTime = Date.now();\n      const diffInSeconds = (endTime - startTime) / 1000;\n      const reactionTime = Math.round((diffInSeconds + Number.EPSILON) * 100) / 100;\n      const selectedAnswer = d.srcElement.__data__;\n      const correctAnswer = d3.max(values);\n      const maxVal = d3.max(values);\n      const minVal = d3.min(values);\n      const error = Math.abs((correctAnswer - selectedAnswer) / (maxVal - minVal));\n      const roundedError = Math.round((error + Number.EPSILON) * 1000) / 1000;\n      const results = {\n        'Group code': experimentSeed,\n        'User ID': userID,\n        Format: format,\n        'Number of values': n,\n        Iteration: curentIteration,\n        'Reaction time (seconds)': reactionTime,\n        'Error (0-1)': roundedError\n      };\n      console.log(results);\n      addResults(results);\n      advanceIteration();\n    };\n\n    this.RenderBlock = () => {\n      // Get SVG and clear it before rendering\n      d3.selectAll('svg > *').remove();\n      const svg = d3.select(this.blockRef.current);\n      const {\n        format,\n        n,\n        curentIteration,\n        experimentSeed\n      } = this.props; // The canvas size\n\n      var width = 400;\n      var height = 400;\n      const NB_VALUES = n; // Seeded randomizer\n\n      const random = seedrandom(`${experimentSeed}${format}${n}${curentIteration}`); // the randomly generated set of values between 0 and 99\n\n      var values = d3.range(NB_VALUES).map(d => Math.floor(random() * 100));\n      var pad = 5; //padding for grid layout (text and bubble)\n\n      var numCol, numRow; // number of columns, number of rows\n\n      var font_size;\n\n      if (NB_VALUES === 25) {\n        numCol = 5;\n        numRow = 5;\n        font_size = 48;\n      } else if (NB_VALUES === 3 || NB_VALUES === 5 || NB_VALUES === 9) {\n        numCol = 3;\n        numRow = 3;\n        font_size = 48;\n      } else {\n        return null;\n      }\n\n      const _w = width / numCol;\n\n      const _h = height / numRow;\n\n      const scales = {};\n      scales.x = d3.scalePoint().range([0, _w]).padding(0.5).align(1);\n      scales.y = d3.scaleBand().range([0, _h]).paddingInner(0.3);\n      const maxCircleRadius = d3.min([scales.y.bandwidth(), scales.x.step()]) / 2;\n      var sign = svg.selectAll('g').data(values).enter().append('g').attr('transform', function (d, i) {\n        return 'translate(' + (i % numCol * _w + pad / 2 * -1) + ',' + (Math.floor(i / numRow) * _h + pad / 2 * -1) + ')';\n      }).on('click', d => this.logOnClickResult(d, values)).style('cursor', 'pointer');\n\n      if (format === Format.BUBBLE) {\n        //that's to create a perceptual scaling by mapping square root of value to radius, but other scaling functions could be used\n        var circleRadiusScale = d3.scaleLinear().domain([Math.sqrt(d3.min(values)), Math.sqrt(d3.max(values))]).range([5, maxCircleRadius]); //create an 'invisible' circle of size half the max size of a bubble, simply to make it possible to click the smaller circles easily.\n\n        sign.append('circle').attr('cx', _w / 2).attr('cy', _w / 2).attr('r', maxCircleRadius / 2).style('fill', 'white'); // then, for each cell we appends a circle\n\n        sign.append('circle').attr('cx', _w / 2).attr('cy', _w / 2).attr('r', d => circleRadiusScale(Math.sqrt(d))).style('fill', 'black');\n      } else if (format === Format.TEXT) {\n        //create an 'invisible' circle of size half the max size of a bubble, simply to make it possible to click the smaller circles easily.\n        sign.append('circle').attr('cx', _w / 2).attr('cy', _w / 2).attr('r', maxCircleRadius / 2).style('fill', 'white');\n        sign.append('text').attr('x', _w / 2).attr('y', _w / 2).attr('text-anchor', 'middle').attr('font-size', font_size + 'px').text(d => d);\n      }\n    };\n\n    this.blockRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.RenderBlock();\n  }\n\n  componentDidUpdate() {\n    this.RenderBlock();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: this.blockRef,\n      style: {\n        height: 400,\n        width: 400\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/maishamir/Documents/Web Dev /node/SENG411-HCI-Experiment/src/components/Block.js"],"names":["React","d3","seedrandom","Format","Object","freeze","TEXT","BUBBLE","Block","Component","constructor","props","logOnClickResult","d","values","format","n","startTime","curentIteration","advanceIteration","experimentSeed","userID","addResults","endTime","Date","now","diffInSeconds","reactionTime","Math","round","Number","EPSILON","selectedAnswer","srcElement","__data__","correctAnswer","max","maxVal","minVal","min","error","abs","roundedError","results","Iteration","console","log","RenderBlock","selectAll","remove","svg","select","blockRef","current","width","height","NB_VALUES","random","range","map","floor","pad","numCol","numRow","font_size","_w","_h","scales","x","scalePoint","padding","align","y","scaleBand","paddingInner","maxCircleRadius","bandwidth","step","sign","data","enter","append","attr","i","on","style","circleRadiusScale","scaleLinear","domain","sqrt","text","createRef","componentDidMount","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport * as seedrandom from 'seedrandom';\n\nexport const Format = Object.freeze({ TEXT: 'Text', BUBBLE: 'Bubble' });\n\nexport class Block extends React.Component {\n    constructor(props) {\n        super(props);\n        this.blockRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.RenderBlock();\n    }\n\n    componentDidUpdate() {\n        this.RenderBlock();\n    }\n\n    logOnClickResult = (d, values) => {\n        const {\n            format,\n            n,\n            startTime,\n            curentIteration,\n            advanceIteration,\n            experimentSeed,\n            userID,\n            addResults,\n        } = this.props;\n\n        const endTime = Date.now();\n        const diffInSeconds = (endTime - startTime) / 1000;\n        const reactionTime =\n            Math.round((diffInSeconds + Number.EPSILON) * 100) / 100;\n\n        const selectedAnswer = d.srcElement.__data__;\n        const correctAnswer = d3.max(values);\n\n        const maxVal = d3.max(values);\n        const minVal = d3.min(values);\n\n        const error = Math.abs(\n            (correctAnswer - selectedAnswer) / (maxVal - minVal)\n        );\n        const roundedError = Math.round((error + Number.EPSILON) * 1000) / 1000;\n\n        const results = {\n            'Group code': experimentSeed,\n            'User ID': userID,\n            Format: format,\n            'Number of values': n,\n            Iteration: curentIteration,\n            'Reaction time (seconds)': reactionTime,\n            'Error (0-1)': roundedError,\n        };\n\n        console.log(results);\n\n        addResults(results);\n        advanceIteration();\n    };\n\n    RenderBlock = () => {\n        // Get SVG and clear it before rendering\n        d3.selectAll('svg > *').remove();\n        const svg = d3.select(this.blockRef.current);\n\n        const { format, n, curentIteration, experimentSeed } = this.props;\n\n        // The canvas size\n        var width = 400;\n        var height = 400;\n\n        const NB_VALUES = n;\n\n        // Seeded randomizer\n        const random = seedrandom(\n            `${experimentSeed}${format}${n}${curentIteration}`\n        );\n\n        // the randomly generated set of values between 0 and 99\n        var values = d3.range(NB_VALUES).map((d) => Math.floor(random() * 100));\n\n        var pad = 5; //padding for grid layout (text and bubble)\n        var numCol, numRow; // number of columns, number of rows\n        var font_size;\n\n        if (NB_VALUES === 25) {\n            numCol = 5;\n            numRow = 5;\n            font_size = 48;\n        } else if (NB_VALUES === 3 || NB_VALUES === 5 || NB_VALUES === 9) {\n            numCol = 3;\n            numRow = 3;\n            font_size = 48;\n        } else {\n            return null;\n        }\n\n        const _w = width / numCol;\n        const _h = height / numRow;\n\n        const scales = {};\n        scales.x = d3.scalePoint().range([0, _w]).padding(0.5).align(1);\n        scales.y = d3.scaleBand().range([0, _h]).paddingInner(0.3);\n\n        const maxCircleRadius =\n            d3.min([scales.y.bandwidth(), scales.x.step()]) / 2;\n\n        var sign = svg\n            .selectAll('g')\n            .data(values)\n            .enter()\n            .append('g')\n            .attr('transform', function (d, i) {\n                return (\n                    'translate(' +\n                    ((i % numCol) * _w + (pad / 2) * -1) +\n                    ',' +\n                    (Math.floor(i / numRow) * _h + (pad / 2) * -1) +\n                    ')'\n                );\n            })\n            .on('click', (d) => this.logOnClickResult(d, values))\n            .style('cursor', 'pointer');\n\n        if (format === Format.BUBBLE) {\n            //that's to create a perceptual scaling by mapping square root of value to radius, but other scaling functions could be used\n            var circleRadiusScale = d3\n                .scaleLinear()\n                .domain([Math.sqrt(d3.min(values)), Math.sqrt(d3.max(values))])\n                .range([5, maxCircleRadius]);\n\n            //create an 'invisible' circle of size half the max size of a bubble, simply to make it possible to click the smaller circles easily.\n            sign.append('circle')\n                .attr('cx', _w / 2)\n                .attr('cy', _w / 2)\n                .attr('r', maxCircleRadius / 2)\n                .style('fill', 'white');\n\n            // then, for each cell we appends a circle\n            sign.append('circle')\n                .attr('cx', _w / 2)\n                .attr('cy', _w / 2)\n                .attr('r', (d) => circleRadiusScale(Math.sqrt(d)))\n                .style('fill', 'black');\n        } else if (format === Format.TEXT) {\n            //create an 'invisible' circle of size half the max size of a bubble, simply to make it possible to click the smaller circles easily.\n            sign.append('circle')\n                .attr('cx', _w / 2)\n                .attr('cy', _w / 2)\n                .attr('r', maxCircleRadius / 2)\n                .style('fill', 'white');\n\n            sign.append('text')\n                .attr('x', _w / 2)\n                .attr('y', _w / 2)\n                .attr('text-anchor', 'middle')\n                .attr('font-size', font_size + 'px')\n                .text((d) => d);\n        }\n    };\n\n    render() {\n        return (\n            <svg ref={this.blockRef} style={{ height: 400, width: 400 }}></svg>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}